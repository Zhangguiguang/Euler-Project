//
//  main.m
//  Problem011
//
//  Created by 张贵广 on 7/31/16.
//  Copyright © 2016 GG. All rights reserved.
//

/*
 方阵中的最大乘积
 在如下的20×20方阵中，有四个呈对角线排列的数被标红了。
 
 08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
 这四个数的乘积是26 × 63 × 78 × 14 = 1788696。
 
 在这个20×20方阵中，四个在同一方向（从下至上、从上至下、从右至左、从左至右或者对角线）上相邻的数的乘积最大是多少？
 */

/*
 思来想去，只能遍历所有的情况，做比较得到最大值了。。。
 把所有数字存入二维数组 ： (0, 0) -> (19, 19)
 遍历整个矩阵，以4个数字为一组，有四种方向
 (1,  0) 左 -> 右     20行，0<=y<20，每一行组头(0, y)
 (0,  1) 上 -> 下     20行，0<=x<20，每一行组头(x, 0)
 (1,  1) 左上 -> 右下  33行，0<=x<17，每一行组头(x, 0)
                           1<=y<17，每一行组头(0, y)
 (1, -1) 左下 -> 右上  33行，3<=y<20，每一行组头(0, y)
                           1<=x<17，每一行组头(x, 19)
 
 int result = 0;
 每一行中，取出每一组数，得到乘积product，result = max(result, product)
 所有方向遍历结束，得到result的最大值
 
 以上4种方向分出6种情况，不应该写出6份代码
 分析流程后，需要写一个通用函数传入不同参数以达到不同效果
 
 void runDirection(px, py, flag, start, end, start2)
 px, py 方向
 flag, start, end 表示某个维度的限制， flag: 0->x  1->y
 start2 另一个维度的起点
 
 
 max product = 70600674
 
 */

#import <Foundation/Foundation.h>

int max = 0;
const int SIDE = 20;
const int LINE = 4;
const int L = LINE-1;
const int matrix[SIDE][SIDE] = {
     8, 02, 22, 97, 38, 15, 00, 40, 00, 75, 04, 05, 07, 78, 52, 12, 50, 77, 91,  8,
    49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 04, 56, 62, 00,
    81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 03, 49, 13, 36, 65,
    52, 70, 95, 23, 04, 60, 11, 42, 69, 24, 68, 56, 01, 32, 56, 71, 37, 02, 36, 91,
    22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80,
    24, 47, 32, 60, 99, 03, 45, 02, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50,
    32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70,
    67, 26, 20, 68, 02, 62, 12, 20, 95, 63, 94, 39, 63,  8, 40, 91, 66, 49, 94, 21,
    24, 55, 58, 05, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72,
    21, 36, 23,  9, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95,
    78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 03, 80, 04, 62, 16, 14,  9, 53, 56, 92,
    16, 39, 05, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57,
    86, 56, 00, 48, 35, 71, 89, 07, 05, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58,
    19, 80, 81, 68, 05, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 04, 89, 55, 40,
    04, 52,  8, 83, 97, 35, 99, 16, 07, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66,
    88, 36, 68, 87, 57, 62, 20, 72, 03, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69,
    04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18,  8, 46, 29, 32, 40, 62, 76, 36,
    20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 04, 36, 16,
    20, 73, 35, 29, 78, 31, 90, 01, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 05, 54,
    01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 01, 89, 19, 67, 48,
};

int num(int x, int y) {
    return matrix[y][x];
}

int isMatch(int x, int y) {
    return (x>=0 && x<SIDE && y>=0 && y<SIDE);
}

int productOfGroup(int px, int py, int xStart, int yStart) {
    int product = num(xStart, yStart);
    for (int i=0; i<L; i++) {
        product *= num(xStart+=px, yStart+=py);
    }
    
    return product;
}

void runLine(int px, int py, int xStart, int yStart) {
    int product = num(xStart, yStart);
    for (int i=0; i<L; i++) {
        product *= num(xStart+=px, yStart+=py);
    }
    max = MAX(max, product);
    
    while (isMatch(xStart+=px, yStart+=py)) {
        int xPre = xStart-LINE*px;
        int yPre = yStart-LINE*py;
        if(num(xPre, yPre) == 0) {
            product = productOfGroup(px, py, xPre+px, yPre+py);
        } else {
            product = product / num(xPre, yPre) * num(xStart, yStart);
        }
        max = MAX(max, product);
    }
}

void runDirection(int px, int py, int flag, int start, int end, int start2) {
    if (flag == 0) {
        for (int x=start; x<end; x++) {
            runLine(px, py, x, start2);
        }
    }
    else {
        for (int y=start; y<end; y++) {
            runLine(px, py, start2, y);
        }
    }
}

int main(int argc, const char * argv[]) {
    @autoreleasepool {

        NSLog(@"左到右");
        runDirection(1, 0, 1, 0, SIDE, 0);
        NSLog(@"max = %d", max);
        
        NSLog(@"上到下");
        runDirection(0, 1, 0, 0, SIDE, 0);
        NSLog(@"max = %d", max);

        NSLog(@"左上到右下");
        runDirection(1, 1, 0, 0, SIDE-L, 0);
        runDirection(1, 1, 1, 1, SIDE-L, 0);
        NSLog(@"max = %d", max);
        
        NSLog(@"左下到右上");
        runDirection(1, -1, 1, L, SIDE, 0);
        runDirection(1, -1, 0, 1, SIDE-L, SIDE-1);
        NSLog(@"max = %d", max);
        
        NSLog(@"max product = %d", max);
    }
    return 0;
}
